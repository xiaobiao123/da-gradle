//自动替换的配置文件
//构建命令：gradle clean build -Penv=dev，根据不同输入的变量不同构家

group 'gradle'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: "org.springframework.boot"


buildscript {
    ext {
        springBootVersion = "1.5.1.RELEASE"
        springloaded = "1.2.3.RELEASE"
    }
    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/plugins-release"}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework:springloaded:${springloaded}")
//        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.6")
    }

}

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext {
    profile = project['env']
}

def loadGroovyConfig(){
    def configFile = file('config.groovy')
    new ConfigSlurper(profile).parse(configFile.toURL()).toProperties()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: loadGroovyConfig())
    }
}

sourceSets {
    main {
        resources {
            srcDir "config/properties/${profile}"
            srcDir "config/xml/${profile}"
        }
    }
}

task replace(type: Sync) {
	def configHome = "${project.rootDir}/config"

    from(configHome) {
        include '**/*.properties'
        include '**/*.xml'
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: loadGroovyConfig()
    }
    into "${buildDir}/resources/main"
}


jar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
    manifest {
        attributes 'Main-Class': 'com.Application'
    }
}


 task run(type: JavaExec, dependsOn: 'build') {
    classpath = sourceSets.main.runtimeClasspath
    if(project.hasProperty('mainClass')){
        main = "${project.getProperty('mainClass')}"
    }
    
    doFirst {
        println "===== begin of run"
    }
    
    doLast {
        println "===== end of run"
    }
}